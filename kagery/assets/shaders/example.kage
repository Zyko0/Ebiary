//kage:unit pixels

package main

var Time float
var Cursor vec2

func sdBox(p, b vec2) float {
	d := abs(p)-b
	return length(max(d, 0)) + min(max(d.x, d.y), 0)
}

func sdEbiten(p vec2) float {
	const b = 0.25
	const r = 0.005
	d := sdBox(p, vec2(b))
	d = min(d, sdBox(p-vec2(-b,b), vec2(b)))
	d = min(d, sdBox(p-vec2(-b,b)*2, vec2(b)))
	d = min(d, sdBox(p+vec2(-b,b)*2, vec2(b)))
	d = max(d, -sdBox(p+vec2(-b-r,b+r)*2.5, vec2(b/2)+r))
	return d-r
}

func Fragment(dst vec4, src vec2, color vec4) vec4 {
	const count = 16
	origin, size := imageSrc0Origin(), imageSrc0Size()
	noise := imageSrc3At(src)

	unit := size.x/count
	aspect := size.x/size.y
	uv := (src-origin)
	uv.y /= aspect
	grid := floor(uv/unit)
	seed := imageSrc3At(origin+grid).x

	light := (sin(seed*32+Time*3*seed)+1)/2
	bgclr := mix(vec3(1,0,0.25), vec3(1, 0.5, 0), (seed+noise.x)/2)
	bgsec := mix(vec3(0.25,0,1), vec3(0, 0.5, 1), (seed+noise.x)/2)
	bg := mix(bgclr, bgsec, light)*(1+noise.x)
	bg = min(bg, 1)
	// Ebiten rep
	uv = mod(uv, unit)
	uv = uv/unit*2-1
	d := sdEbiten(uv)
	circle := (1-max(length(uv)-0.25*(1-light), 0))
	if d < 0 {
		clr := mix(vec3(1, 0.125, 0), vec3(0.9, 0.9, 0), abs(d)*2)
		sec := mix(vec3(1,0.7,0), vec3(1, 0, 0), abs(d)*2)
		clr = mix(clr, sec, 1-light)
		return vec4(clr, 1)*circle
	}
	// Background
	return vec4(bg, 1)*circle
}