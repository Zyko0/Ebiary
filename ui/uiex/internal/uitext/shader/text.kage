//kage:unit pixels

package main

const (
	Default       = 0
	Bold          = 1
	Italic        = 2
	Underline     = 4
	Strikethrough = 8
	Background    = 16
)

func unpackColor(v float) vec3 {
	iv := int(v)
	return vec3(
		float((iv>>16)&255),
		float((iv>>8)&255),
		float(iv&255),
	) / 255
}

var LineHeight float

func Fragment(dst vec4, src vec2, color vec4) vec4 {
	origin := imageSrc0Origin()
	uv := src - origin

	fg := unpackColor(color.r)
	//fg = vec3(0)
	bg := unpackColor(color.g)
	bgMask := 0.
	y := color.b
	mask := int(color.a)
	if mask&Background > 0 {
		bgMask = 1
	}
	_, _, _, _, _, _ = uv, fg, bg, y, mask, bgMask

	if mask&Italic > 0 {
		off := mat2(1, tan(0.1396), 0, 1)*vec2(LineHeight)//vec2(imageSrc0Size().x, 0)//imageSrc0Size()
		_ = off
		uv *= mat2(1, tan(0.1396), 0., 1.)
		uv.x -= off.x/2*0.25
	}
	clr := imageSrc0At(uv + origin)
	if mask&Bold > 0 {
		r := LineHeight * 0.025
		clr = max(clr, imageSrc0At(uv+vec2(-r, 0)+origin))
		clr = max(clr, imageSrc0At(uv+vec2(r, 0)+origin))
	}
	clr.rgb *= fg

	return clr + vec4(bg, 1)*(1-clr.a)*bgMask
}
